{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","preState","this","buildingBurger","authRedictPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedict","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","validationError","ValidationError","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.577e6bfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { updateObject, checkValidity } from \"../../shared/utility\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions/index\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your e-Mail\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  };\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedictPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true\n      })\n    });\n    this.setState({ controls: updatedControls });\n  };\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  switchAuthModeHandler = () => {\n    this.setState(preState => {\n      return { isSignup: !preState.isSignup };\n    });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={event => this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>;\n    }\n\n    let authRedict = null;\n    if (this.props.isAuthenticated) {\n      authRedict = <Redirect to={this.props.authRedictPath} />;\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedict}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button btnType=\"Success\">Submit</Button>\n        </form>\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\n          {this.state.isSignup ? \"Sign In\" : \"Sign up\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedictPath: state.auth.authRedictPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\"))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","/* eslint-disable */\n\nimport React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst input = props => {\n  let inputElement = null;\n\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = (\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\n    );\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};"],"sourceRoot":""}