{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","isEMail","street","zipCode","minLength","maxLength","isNumeric","country","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","validationError","ValidationError","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.2e69869c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from \"react\";\nimport classes from \"./CheckoutSummary.module.css\";\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\n\nconst checkoutSummary = props => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it tastes well!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default checkoutSummary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\n\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport classes from \"./ContactData.module.css\";\nimport axios from \"../../../axios-orders\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/WithErrorHandler/WithErrorHandler\";\nimport * as actions from \"../../../store/actions/index\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your name\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your e-Mail\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEMail: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Street\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"ZIP Code\"\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n          isNumeric: true\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\"\n        },\n        value: \"\",\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" }\n          ]\n        },\n        value: \"\",\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  };\n\n  ////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////\n\n  orderHandler = event => {\n    event.preventDefault();\n    // console.log(this.props.ingredients);\n    // console.log(\"orderHandler\");\n\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    };\n    this.props.onOrderBurger(order, this.props.token);\n  };\n  ///////////////////////////////////\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    // console.log(updatedOrderForm);\n\n    const updatedFormElement = updateObject(\n      this.state.orderForm[inputIdentifier],\n      {\n        value: event.target.value,\n        valid: checkValidity(\n          event.target.value,\n          this.state.orderForm[inputIdentifier].validation\n        ),\n        touched: true\n      }\n    );\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    // console.log(updatedFormElement);\n\n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n    // console.log(formIsValid);\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n  };\n\n  ////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h1>Enter your Contact Data</h1>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"./ContactData/ContactData\";\n\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n  render() {\n    let summary = <Redirect to=\"/\" />;\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            checkoutCancelled={this.checkoutCancelledHandler}\n            ingredients={this.props.ings}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={`${this.props.match.path}/contact-data`}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","/* eslint-disable */\n\nimport React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst input = props => {\n  let inputElement = null;\n\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = (\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\n    );\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n      {validationError}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};"],"sourceRoot":""}